data= m[BD_and_bicarbonate,])
# Base deficit and lactate
BD_and_lactate = !is.na(m$BD) & !is.na(m$lactate)
mod_impute2 = lmer(BD ~ lactate + (1 | country),
data= m[BD_and_lactate,])
# Base deficit and rr
BD_and_rr = !is.na(m$BD) & !is.na(m$rr)
mod_impute3 = lmer(BD ~ rr + (1 | studyID) + (1 | country),
data= m[BD_and_rr,])
ind1 = is.na(m$BD) & !is.na(m$bicarbonate)
ind2 = !ind1 & is.na(m$BD) & !is.na(m$lactate)
ind3 = !ind1 & !ind2 & is.na(m$BD) & !is.na(m$rr)
# BUN and creatinine
BUN_and_cr = !is.na(m$BUN) & !is.na(m$creatinine)
mod_impute4 = lmer(log(BUN) ~ creatinine + (1 | studyID) + (1 | country),
data= m[BUN_and_cr,])
ind4 = is.na(m$BUN) & !is.na(m$creatinine)
# Age from HCT
HCT_and_Age = !is.na(m$AgeInYear) & !is.na(m$HCT)
mod_impute5 = lmer(HCT ~ AgeInYear + (1 | studyID) + (1 | country),
data = m[HCT_and_Age,])
ind5 = is.na(m$HCT) & !is.na(m$AgeInYear)
# marginal distribution of BD to impute remaining
BD_alone = !is.na(m$BD)
mod_impute6 = lmer(BD ~ AgeInYear + (1 | studyID) + (1 | country),
data = m[BD_alone,])
ind6 = !ind1 & !ind2 & !ind3 & is.na(m$BD)
# marginal distribution of coma
Coma_alone = !is.na(m$coma)
mod_impute7 = glmer(coma ~ AgeInYear + hypoglycaemia + (1 | studyID) + (1 | country),
family = 'binomial',
data = m[Coma_alone,])
ind7 = is.na(m$coma)
# marginal distribution of LPAR_pct
LPAR_pct_alone = !is.na(m$LPAR_pct)
mod_impute8 = lmer(LPAR_pct ~ AgeInYear + (1 | studyID) + (1 | country),
data = m[LPAR_pct_alone,])
ind8 = is.na(m$LPAR_pct)
# marginal distribution of LPAR_pct
Hypoglycaemia_alone = !is.na(m$hypoglycaemia)
mod_impute9 = glmer(hypoglycaemia ~ 1 + (1 | studyID) + (1 | country),
data = m[Hypoglycaemia_alone,], family='binomial')
ind9 = is.na(m$hypoglycaemia)
# marginal distribution of BUN
BUN_alone = !is.na(m$BUN)
mod_impute10 = lmer(log(BUN) ~ 1 + (1 | studyID) + (1 | country),
data = m[BUN_alone,])
ind10 = !ind4 & is.na(m$BUN)
if(RUN_MODELS){
K_imputations = 500
SM_Impute_List = list()
for (k in 1:K_imputations){
Imp_data = m
# BD from bicarbonate
coefs1 = summary(mod_impute1)$coefficients
Imp_data$BD[ind1] = rnorm(n = sum(ind1),
mean = predict(mod_impute1, newdata = m[ind1,]),
sd = coefs1[1,'Std. Error'] +
coefs1[2,'Std. Error']*m$bicarbonate[ind1])
# BD from lactate
coefs2 = summary(mod_impute2)$coefficients
Imp_data$BD[ind2] = rnorm(n = sum(ind2),
mean = predict(mod_impute2, newdata = m[ind2,],allow.new.levels=T),
sd = coefs2[1,'Std. Error'] +
coefs2[2,'Std. Error']*m$lactate[ind2])
# BD from respiratory rate
coefs3 = summary(mod_impute3)$coefficients
Imp_data$BD[ind3] = rnorm(n = sum(ind3),
mean = predict(mod_impute3, newdata = m[ind3,],allow.new.levels=T),
sd = coefs3[1,'Std. Error'] +
coefs3[2,'Std. Error']*m$rr[ind3])
# BUN from creatinine
coefs4 = summary(mod_impute4)$coefficients
Imp_data$BUN[ind4] = exp(rnorm(n = sum(ind4),
mean = predict(mod_impute4, newdata = m[ind4,],allow.new.levels=T),
sd = coefs4[1,'Std. Error'] +
coefs4[2,'Std. Error']*m$creatinine[ind4]))
# HCT from Age
coefs5 = summary(mod_impute5)$coefficients
Imp_data$HCT[ind5] = rnorm(n = sum(ind5),
mean = predict(mod_impute5, newdata = m[ind5,],allow.new.levels=T),
sd = coefs5[1,'Std. Error'] +
coefs5[2,'Std. Error']*m$AgeInYear[ind5])
# BD from age
coefs6 = summary(mod_impute6)$coefficients
Imp_data$BD[ind6] = rnorm(n = sum(ind6),
mean = predict(mod_impute6, newdata = m[ind6,],allow.new.levels=T),
sd = coefs6[1,'Std. Error'] +
coefs6[2,'Std. Error']*m$AgeInYear[ind6])
# Coma from hypoglycaemia
coefs7 = summary(mod_impute7)$coefficients
Imp_data$coma[ind7] = rbinom(n = sum(ind7), size = 1,
predict(mod_impute7, newdata = m[ind7,],
allow.new.levels=T, type='response'))
# Parasitaemia from age
coefs8 = summary(mod_impute8)$coefficients
Imp_data$LPAR_pct[ind8] = rnorm(n = sum(ind8),
mean = predict(mod_impute8,
newdata = m[ind8,],
allow.new.levels=T),
sd = coefs8[1,'Std. Error'] +
coefs8[2,'Std. Error']*m$AgeInYear[ind8])
# Hypoglycaemia: marginal
coefs9 = summary(mod_impute9)$coefficients
Imp_data$hypoglycaemia[ind9] = rbinom(n = sum(ind9),size = 1,
prob = predict(mod_impute9,
newdata = m[ind9,],
allow.new.levels=T,
type='response'))
# BUN: marginal
coefs10 = summary(mod_impute10)$coefficients
Imp_data$BUN[ind10] = exp(rnorm(n = sum(ind10),
mean = predict(mod_impute10, newdata = m[ind10,],
allow.new.levels=T),
sd = coefs10[1,'Std. Error']))
SM_Impute_List[[k]] = Imp_data
}
save(SM_Impute_List, file = 'RData/Multiple_Imputed_Datasets.RData')
# Check the number of remaining missing in the last imputed dataset:
vars_explanatory = c('HCT','LPAR_pct','coma' ,'convulsions',
'poedema','BUN','BD' ,'shock','hypoglycaemia',
'drug_AS','studyID','country')
apply(Imp_data[,vars_explanatory], 2, function(x) sum(is.na(x)))
} else {
load('RData/Multiple_Imputed_Datasets.RData')
}
if(RUN_MODELS){
# the model formula
DAG_fmla = "outcome ~ HCT + LPAR_pct + coma + convulsions + poedema +
log2(BUN) + BD + shock + hypoglycaemia +
drug_AS + (1 | studyID) + (1 | country)"
# fit the model to each dataset
modList= glmerModList(DAG_fmla, data = SM_Impute_List,
family=binomial,parallel = T)
# save the output
save(modList, file = 'RData/Models_List.RData')
} else {
load('RData/Models_List.RData')
}
# extract the fixed and random effects from all the model fits
# These functions then compute the overall estimates
FixedEffs = modelFixedEff(modList)
RandEffs = modelRandEffStats(modList)
print(FixedEffs)
print(RandEffs)
# The scalar multiples to put the AORs on the correct scales
Scalar_f = c(1, 10, 1, 1, 1, 10, 1, log2(3), 1, 1, 1)
# Compute 95% CIs
Results = data.frame(lowerCI = exp(Scalar_f*(FixedEffs$estimate -
1.96*FixedEffs$std.error)),
mean = exp(Scalar_f*(FixedEffs$estimate)),
upperCI = exp(Scalar_f*(FixedEffs$estimate +
1.96*FixedEffs$std.error)))
rownames(Results) = FixedEffs$term
plotting_ind = rownames(Results) %in% c('BD','coma','convulsions1','drug_AS','HCT',
'log2(BUN)','poedema1','LPAR_pct','shock1')
Results['HCT',] = 1/Results['HCT',]
Results = Results[plotting_ind,]
x_ind = sort.int(Results$mean, index.return = T)$ix
Results = Results[x_ind,]
par(bty='n', las=1, mar = c(4,9,2,2))
Y_Labels = c('Artemisinin drug\nversus\nnon Artemisinin drug',
'-10 % points\nabsolute haematocrit\non admission',
'Tenfold increase\n in parasitaemia',
'Seizures\non admission',
'Shock \non admission',
'Pulmonary\nOedema\non admission',
'3 fold increase\nin blood urea\nnitrogen (mmol/L)',
'+10 mEq/L\nbase deficit',
'Coma\non admission')
xlims = c(0.5, 4.5)
plot(NA,NA, xlim= log2(xlims), ylim = c(0,1),xaxt='n',
xlab='', ylab='', yaxt='n')
axis(1, at = log2(c(0.5,1, 2,4)), labels = c(0.5,1, 2,4))
abline(v=0, lty=2, lwd=3, col='red')
yindex =1
ypos = seq(0,1,length.out = sum(plotting_ind))
for(i in 1:nrow(Results)){
arrows(log2(Results[i,'lowerCI']),ypos[yindex],
log2(Results[i,'upperCI']),ypos[yindex],
length=0.05, angle=90, code=3,
col = 'black',lwd=3)
points(log2(Results[i,'mean']),ypos[yindex],pch=18,cex=2)
yindex=yindex+1
}
abline(h=ypos, lty=3)
axis(side = 2, at = ypos, labels = Y_Labels,tick=FALSE)
mtext(side=1, line = 2.5, text = 'Adjusted odds ratio')
mtext(side = 3, line = 1, text = 'Increased survival',adj = 0)
mtext(side = 3, line = 1, text = 'Decreased survival',adj = 1)
plotting_ind = rownames(Results) %in% c('BD','coma','convulsions1','drug_AS','HCT',
'log2(BUN)','poedema1','LPAR_pct','shock1')
Results['HCT',] = 1/Results['HCT',]
Results = Results[plotting_ind,]
x_ind = sort.int(Results$mean, index.return = T)$ix
Results = Results[x_ind,]
print(Results)
par(bty='n', las=1, mar = c(4,9,2,2))
Y_Labels = c('Artemisinin drug\nversus\nnon Artemisinin drug',
'-10 % points\nabsolute haematocrit\non admission',
'Tenfold increase\n in parasitaemia',
'Seizures\non admission',
'Shock \non admission',
'Pulmonary\nOedema\non admission',
'3 fold increase\nin blood urea\nnitrogen (mmol/L)',
'+10 mEq/L\nbase deficit',
'Coma\non admission')
xlims = c(0.5, 4.5)
plot(NA,NA, xlim= log2(xlims), ylim = c(0,1),xaxt='n',
xlab='', ylab='', yaxt='n')
axis(1, at = log2(c(0.5,1, 2,4)), labels = c(0.5,1, 2,4))
abline(v=0, lty=2, lwd=3, col='red')
yindex =1
ypos = seq(0,1,length.out = sum(plotting_ind))
for(i in 1:nrow(Results)){
arrows(log2(Results[i,'lowerCI']),ypos[yindex],
log2(Results[i,'upperCI']),ypos[yindex],
length=0.05, angle=90, code=3,
col = 'black',lwd=3)
points(log2(Results[i,'mean']),ypos[yindex],pch=18,cex=2)
yindex=yindex+1
}
abline(h=ypos, lty=3)
axis(side = 2, at = ypos, labels = Y_Labels,tick=FALSE)
mtext(side=1, line = 2.5, text = 'Adjusted odds ratio')
mtext(side = 3, line = 1, text = 'Increased survival',adj = 0)
mtext(side = 3, line = 1, text = 'Decreased survival',adj = 1)
load('RData/Data.RData')
m$coma[is.na(m$coma) & m$studyID=='AQ'] = 0
m$drug_AS = 0
m$drug_AS[m$drug_class=='artemisinin']=1
m$LPAR_pct[is.infinite(m$LPAR_pct)] = 0
m = filter(m, country %in% c('Bangladesh','India','Indonesia','Myanmar','Thailand','Vietnam'))
3507/9001
pnorm(0)
pnorm(1.96)
pnorm(2)
8/1.96
.13/0.0408
pnorm(.13/0.0408)
1-pnorm(.13/0.0408)
setwd("~/Dropbox/MORU/Causality/SevereMalariaAnalysis")
log2(2)
?grid
xlims
c(0.5, 8)
log2(c(0.5, 8))
?arrows
load(file = 'RData/ModelList_Asia.RData')
FixedEffs = modelFixedEff(modList)
library(lme4)
require(RColorBrewer)
library(merTools)
require(boot)
require(plyr)
require(dplyr)
library(mgcv) # For the GAM modelling
library(epitools) # For risk ratio Wald CIs
RUN_MODELS
RUN_MODELS=F
if(RUN_MODELS){
DAG_fmla = "outcome ~ HCT + LPAR_pct + coma + convulsions + poedema +
log2(BUN) + BD + shock + hypoglycaemia +
drug_AS + (1 | studyID) + (1 | country)"
# fit the model to each dataset
modList= glmerModList(DAG_fmla,data = SM_Impute_List,
family=binomial,parallel = T)
save(modList, file = 'RData/ModelList_Asia.RData')
} else{
load(file = 'RData/ModelList_Asia.RData')
}
FixedEffs = modelFixedEff(modList)
RandEffs = modelRandEffStats(modList)
print(FixedEffs)
print(RandEffs)
# The scalar multiples to put the AORs on the correct scales
Scalar_f = c(1, 7, 1, 1, 1, 10, 1, 1, log10(6), 1, 1)
# Compute 95% CIs
Results = data.frame(lowerCI = exp(Scalar_f*(FixedEffs$estimate -
1.96*FixedEffs$std.error)),
mean = exp(Scalar_f*(FixedEffs$estimate)),
upperCI = exp(Scalar_f*(FixedEffs$estimate +
1.96*FixedEffs$std.error)))
rownames(Results) = FixedEffs$term
Results
Results['HCT',] = 1/Results['HCT',]
Results = Results[!(rownames(Results) %in% c('hypoglycaemia','(Intercept)')),]
rownames(Results) = c('+7 mEq/L\nbase deficit',
'Coma\non admission',
'Seizures\non admission',
'Artemisinin derivative\nversus quinine',
'-10 % points\nabsolute haematocrit\non admission',
'Two fold increase\nin blood urea\nnitrogen (mmol/L)',
'Six fold increase\n in parasitised\nred blood cells',
'Pulmonary\noedema\non admission',
'Shock\non admission')
x_ind = sort.int(Results$mean, index.return = T)$ix
Results = Results[x_ind,]
par(bty='n', las=1, mar = c(4,9,2,2))
xlims = c(0.47,4)
plot(NA,NA, xlim= log2(xlims), ylim = c(0,1),xaxt='n',
xlab='', ylab='', yaxt='n')
abline(v= seq(-1,3,by=1),col = "lightgray", lty = "dotted",lwd = par("lwd"))
axis(1, at = log2(c(0.5,1, 2,4)), labels = c(0.5,1, 2,4))
abline(v=0, lty=2, lwd=3, col='red')
yindex =1
ypos = seq(0,1,length.out = nrow(Results))
eps = .2 * 1/(nrow(Results)-1)
load('Results_fullmodel.RData')
for(i in 1:nrow(Results)){
name_i = rownames(Results)[i]
j = rownames(Results_FM)==name_i
arrows(log2(Results[i,'lowerCI']),ypos[yindex],
log2(Results[i,'upperCI']),ypos[yindex],
length=0.0, angle=90, code=3,
col = 'black',lwd=3)
points(log2(Results[i,'mean']),ypos[yindex],pch=18,cex=2)
arrows(log2(Results_FM[j,'lowerCI']),ypos[yindex]-eps,
log2(Results_FM[j,'upperCI']),ypos[yindex]-eps,
length=0.0, angle=90, code=3,
col = 'darkblue',lwd=3)
points(log2(Results_FM[j,'mean']),ypos[yindex]-eps,pch=18,cex=2)
yindex=yindex+1
}
i
rownames(Results)[i]
# The scalar multiples to put the AORs on the correct scales
Scalar_f = c(1, 7, 1, 1, 1, 10, 1, 1, log10(6), 1, 1)
# Compute 95% CIs
Results = data.frame(lowerCI = exp(Scalar_f*(FixedEffs$estimate -
1.96*FixedEffs$std.error)),
mean = exp(Scalar_f*(FixedEffs$estimate)),
upperCI = exp(Scalar_f*(FixedEffs$estimate +
1.96*FixedEffs$std.error)))
rownames(Results) = FixedEffs$term
Results
Results['HCT',] = 1/Results['HCT',]
Results = Results[!(rownames(Results) %in% c('hypoglycaemia','(Intercept)')),]
rownames(Results) = c('+7 mEq/L\nbase deficit',
'Coma\non admission',
'Seizures\non admission',
'Artemisinin derivative\nversus quinine',
'-10 % points\nabsolute haematocrit\non admission',
'Two fold increase\nin blood urea\nnitrogen (mmol/L)',
'Six fold increase\n in parasitised\nred blood cells',
'Pulmonary\noedema\non admission',
'Shock\non admission')
x_ind = sort.int(Results$mean, index.return = T)$ix
Results = Results[x_ind,]
par(bty='n', las=1, mar = c(4,9,2,2))
xlims = c(0.47,4)
plot(NA,NA, xlim= log2(xlims), ylim = c(0,1),xaxt='n',
xlab='', ylab='', yaxt='n')
abline(v= seq(-1,3,by=1),col = "lightgray", lty = "dotted",lwd = par("lwd"))
axis(1, at = log2(c(0.5,1, 2,4)), labels = c(0.5,1, 2,4))
abline(v=0, lty=2, lwd=3, col='red')
yindex =1
ypos = seq(0,1,length.out = nrow(Results))
eps = .2 * 1/(nrow(Results)-1)
load('Results_fullmodel.RData')
rownames(Results)[i]
name_i = rownames(Results)[i]
rownames(Results_FM)==name_i
xlims = c(0.47,4)
plot(NA,NA, xlim= log2(xlims), ylim = c(0,1),xaxt='n',
xlab='', ylab='', yaxt='n')
abline(v= seq(-1,3,by=1),col = "lightgray", lty = "dotted",lwd = par("lwd"))
axis(1, at = log2(c(0.5,1, 2,4)), labels = c(0.5,1, 2,4))
abline(v=0, lty=2, lwd=3, col='red')
yindex =1
ypos = seq(0,1,length.out = nrow(Results))
eps = .2 * 1/(nrow(Results)-1)
name_i = rownames(Results)[i]
j = rownames(Results_FM)==name_i
arrows(log2(Results[i,'lowerCI']),ypos[yindex],
log2(Results[i,'upperCI']),ypos[yindex],
length=0.0, angle=90, code=3,
col = 'black',lwd=3)
points(log2(Results[i,'mean']),ypos[yindex],pch=18,cex=2)
arrows(log2(Results_FM[j,'lowerCI']),ypos[yindex]-eps,
log2(Results_FM[j,'upperCI']),ypos[yindex]-eps,
length=0.0, angle=90, code=3,
col = 'darkblue',lwd=3)
points(log2(Results_FM[j,'mean']),ypos[yindex]-eps,pch=18,cex=2)
for(i in 1:nrow(Results)){
name_i = rownames(Results)[i]
j = rownames(Results_FM)==name_i
arrows(log2(Results[i,'lowerCI']),ypos[yindex],
log2(Results[i,'upperCI']),ypos[yindex],
length=0.0, angle=90, code=3,
col = 'black',lwd=3)
points(log2(Results[i,'mean']),ypos[yindex],pch=18,cex=2)
arrows(log2(Results_FM[j,'lowerCI']),ypos[yindex]-eps,
log2(Results_FM[j,'upperCI']),ypos[yindex]-eps,
length=0.0, angle=90, code=3,
col = 'darkblue',lwd=3)
points(log2(Results_FM[j,'mean']),ypos[yindex]-eps,pch=18,cex=2,col='blue')
yindex=yindex+1
}
i
name_i
rownames(Results_FM)
eps = .2 * 1/(nrow(Results)-1)
load('Results_fullmodel.RData')
for(i in 1:nrow(Results)){
name_i = rownames(Results)[i]
j = rownames(Results_FM)==name_i
arrows(log2(Results[i,'lowerCI']),ypos[yindex],
log2(Results[i,'upperCI']),ypos[yindex],
length=0.0, angle=90, code=3,
col = 'black',lwd=3)
points(log2(Results[i,'mean']),ypos[yindex],pch=18,cex=2)
arrows(log2(Results_FM[j,'lowerCI']),ypos[yindex]-eps,
log2(Results_FM[j,'upperCI']),ypos[yindex]-eps,
length=0.0, angle=90, code=3,
col = 'darkblue',lwd=3)
points(log2(Results_FM[j,'mean']),ypos[yindex]-eps,pch=18,cex=2,col='blue')
yindex=yindex+1
}
if(RUN_MODELS){
DAG_fmla = "outcome ~ HCT + LPAR_pct + coma + convulsions + poedema +
log2(BUN) + BD + shock + hypoglycaemia +
drug_AS + (1 | studyID) + (1 | country)"
# fit the model to each dataset
modList= glmerModList(DAG_fmla,data = SM_Impute_List,
family=binomial,parallel = T)
save(modList, file = 'RData/ModelList_Asia.RData')
} else{
load(file = 'RData/ModelList_Asia.RData')
}
FixedEffs = modelFixedEff(modList)
RandEffs = modelRandEffStats(modList)
print(FixedEffs)
print(RandEffs)
# The scalar multiples to put the AORs on the correct scales
Scalar_f = c(1, 7, 1, 1, 1, 10, 1, 1, log10(6), 1, 1)
# Compute 95% CIs
Results = data.frame(lowerCI = exp(Scalar_f*(FixedEffs$estimate -
1.96*FixedEffs$std.error)),
mean = exp(Scalar_f*(FixedEffs$estimate)),
upperCI = exp(Scalar_f*(FixedEffs$estimate +
1.96*FixedEffs$std.error)))
rownames(Results) = FixedEffs$term
Results
Results['HCT',] = 1/Results['HCT',]
Results = Results[!(rownames(Results) %in% c('hypoglycaemia','(Intercept)')),]
rownames(Results) = c('+7 mEq/L\nbase deficit',
'Coma\non admission',
'Seizures\non admission',
'Artemisinin derivative\nversus quinine',
'-10 % points\nabsolute haematocrit\non admission',
'Two fold increase\nin blood urea\nnitrogen (mmol/L)',
'Six fold increase\n in parasitised\nred blood cells',
'Pulmonary\noedema\non admission',
'Shock\non admission')
x_ind = sort.int(Results$mean, index.return = T)$ix
Results = Results[x_ind,]
par(bty='n', las=1, mar = c(4,9,2,2))
xlims = c(0.47,4)
plot(NA,NA, xlim= log2(xlims), ylim = c(0,1),xaxt='n',
xlab='', ylab='', yaxt='n')
abline(v= seq(-1,3,by=1),col = "lightgray", lty = "dotted",lwd = par("lwd"))
axis(1, at = log2(c(0.5,1, 2,4)), labels = c(0.5,1, 2,4))
abline(v=0, lty=2, lwd=3, col='red')
yindex =1
ypos = seq(0,1,length.out = nrow(Results))
eps = .2 * 1/(nrow(Results)-1)
load('Results_fullmodel.RData')
for(i in 1:nrow(Results)){
name_i = rownames(Results)[i]
j = rownames(Results_FM)==name_i
arrows(log2(Results[i,'lowerCI']),ypos[yindex],
log2(Results[i,'upperCI']),ypos[yindex],
length=0.0, angle=90, code=3,
col = 'black',lwd=3)
points(log2(Results[i,'mean']),ypos[yindex],pch=18,cex=2)
arrows(log2(Results_FM[j,'lowerCI']),ypos[yindex]-eps,
log2(Results_FM[j,'upperCI']),ypos[yindex]-eps,
length=0.0, angle=90, code=3,
col = 'darkblue',lwd=3)
points(log2(Results_FM[j,'mean']),ypos[yindex]-eps,pch=18,cex=2,col='blue')
yindex=yindex+1
}
abline(h=ypos, lty=3)
axis(side = 2, at = ypos, labels = rownames(Results),tick=FALSE)
mtext(side=1, line = 2.5, text = 'Adjusted odds ratio')
mtext(side = 3, line = 1, text = 'Increased survival',adj = 0)
mtext(side = 3, line = 1, text = 'Decreased survival',adj = 1)
load('RData/Models_List.RData')
# extract the fixed and random effects from all the model fits
# These functions then compute the overall estimates
FixedEffs = modelFixedEff(modList)
RandEffs = modelRandEffStats(modList)
print(FixedEffs)
print(RandEffs)
# The scalar multiples to put the AORs on the correct scales
Scalar_f = c(1, 7, 1, 1, 1, 10, 1, 1, log10(6), 1, 1)
# Compute 95% CIs
Results = data.frame(lowerCI = exp(Scalar_f*(FixedEffs$estimate -
1.96*FixedEffs$std.error)),
mean = exp(Scalar_f*(FixedEffs$estimate)),
upperCI = exp(Scalar_f*(FixedEffs$estimate +
1.96*FixedEffs$std.error)))
rownames(Results) = FixedEffs$term
plotting_ind = rownames(Results) %in% c('BD','coma','convulsions1','drug_AS','HCT',
'log2(BUN)','poedema1','LPAR_pct','shock1')
Results['HCT',] = 1/Results['HCT',]
Results = Results[plotting_ind,]
x_ind = sort.int(Results$mean, index.return = T)$ix
Results = Results[x_ind,]
print(round(Results,2))
Results
