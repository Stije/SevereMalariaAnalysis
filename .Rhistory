ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Age_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
AQ_dat$AgeInYear
Eff_TrialSize = SDs = array(dim=length(alphas))
Age_Avg = Hct_Avg = array(dim = length(alphas))
AQ_dat$score = AQ_dat$AgeInYear
AQ_dat = arrange(AQ_dat, score)
YS_age = YS_hct = array(dim=c(3,length(alphas)))
# Do for age first
for(i in 1:length(alphas)){
ws = Beta_weights(alpha1 = alphas[i], beta1 = betas[i], N = N)
YS_age[2,i] = Trt_Effect(AQ_dat, ws)
Eff_TrialSize[i] = Effective_Sample_Size(ws = ws)
Age_Avg[i] = weighted.mean(AQ_dat$score, ws)
YS_age[1,i] = YS_age[2,i] - 1.96*SD_Inflation(ws = ws)*sigma
YS_age[3,i] = YS_age[2,i] + 1.96*SD_Inflation(ws = ws)*sigma
}
YS_age = 100*YS_age
# Do for haematocrit second
AQ_dat$score = AQ_dat$HCT
AQ_dat = arrange(AQ_dat, score)
for(i in 1:length(alphas)){
ws = Beta_weights(alpha1 = alphas[i], beta1 = betas[i], N = N)
YS_hct[2,i] = Trt_Effect(AQ_dat, ws)
Eff_TrialSize[i] = Effective_Sample_Size(ws = ws)
Age_Avg[i] = weighted.mean(AQ_dat$score, ws)
YS_hct[1,i] = YS_hct[2,i] - 1.96*SD_Inflation(ws = ws)*sigma
YS_hct[3,i] = YS_hct[2,i] + 1.96*SD_Inflation(ws = ws)*sigma
}
YS_hct = 100*YS_hct
Eff_TrialSize = SDs = array(dim=length(alphas))
Age_Avg = Hct_Avg = array(dim = length(alphas))
AQ_dat$score = AQ_dat$AgeInYear
AQ_dat = arrange(AQ_dat, score)
YS_age = YS_hct = array(dim=c(3,length(alphas)))
# Do for age first
for(i in 1:length(alphas)){
ws = Beta_weights(alpha1 = alphas[i], beta1 = betas[i], N = N)
YS_age[2,i] = Trt_Effect(AQ_dat, ws)
Eff_TrialSize[i] = Effective_Sample_Size(ws = ws)
Age_Avg[i] = weighted.mean(AQ_dat$score, ws)
YS_age[1,i] = YS_age[2,i] - 1.96*SD_Inflation(ws = ws)*sigma
YS_age[3,i] = YS_age[2,i] + 1.96*SD_Inflation(ws = ws)*sigma
}
YS_age = 100*YS_age
# Do for haematocrit second
AQ_dat$score = AQ_dat$HCT
AQ_dat = arrange(AQ_dat, score)
for(i in 1:length(alphas)){
ws = Beta_weights(alpha1 = alphas[i], beta1 = betas[i], N = N)
YS_hct[2,i] = Trt_Effect(AQ_dat, ws)
Eff_TrialSize[i] = Effective_Sample_Size(ws = ws)
Hct_Avg[i] = weighted.mean(AQ_dat$score, ws)
YS_hct[1,i] = YS_hct[2,i] - 1.96*SD_Inflation(ws = ws)*sigma
YS_hct[3,i] = YS_hct[2,i] + 1.96*SD_Inflation(ws = ws)*sigma
}
YS_hct = 100*YS_hct
N
mycols = brewer.pal(length(studies), name = 'Dark2')
main_col = mycols[which(studies=='AQ')]
par(las = 1, bty='n', mar=c(4,4,4,2), mfrow=c(1,2))
plot(Age_Avg, (YS_age[2,]), type='l', ylim = range(YS_age),
xlab='Mean baseline age (years)',
ylab = 'Mean mortality difference (%) and 95% CI', lwd=3, col=main_col,
xlim = range(Age_Avg))
lines((Age_Avg), (YS_age[1,]), lty=2, lwd=2, col=main_col)
lines((Age_Avg), (YS_age[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS_age[c(1,3),K], lwd=2, lty='dotted')
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Age_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
#******* HCT ***************#
plot(Hct_Avg, (YS_hct[2,]), type='l', ylim = range(YS_hct),
xlab='Mean baseline age (years)',
ylab = 'Mean mortality difference (%) and 95% CI', lwd=3, col=main_col,
xlim = range(Hct_Avg))
lines((Hct_Avg), (YS_hct[1,]), lty=2, lwd=2, col=main_col)
lines((Hct_Avg), (YS_hct[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS_hct[c(1,3),K], lwd=2, lty='dotted')
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Age_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
knitr::opts_chunk$set(cache = TRUE, cache.comments = FALSE,
echo = TRUE, include = TRUE,
fig.width = 7, fig.height = 7,
fig.pos = 'H',
dev = 'png', dpi = 300)
require(dplyr)
require(RColorBrewer)
require(lme4)
# For a given set of normalised weights, calculate the effective sample size
Effective_Sample_Size = function(ws){
# check normalised
ws = ws/sum(ws)
eff_n = sum(ws)^2 / sum(ws^2)
return(eff_n)
}
# the change to the standard error for a given set of weights
SD_Inflation = function(ws){
ref_SD = 1/sqrt(length(ws))
ws = ws/sum(ws)
return(sqrt(sum(ws^2))/ref_SD)
}
# For a given beta paramatrisation, return the corresponding N weights
Beta_weights = function(alpha1=1, beta1=1, N=100){
# One of the parameters has to 1, the other greater or equal to 1
if((alpha1 == 1 & beta1 >= 1) | (alpha1 >= 1 & beta1 == 1)){
weights = dbeta(seq(0,1,length.out = N+2), shape1 = alpha1, shape2 = beta1)
weights = weights[2:(N+1)]/sum(weights[2:(N+1)])
return(weights)
} else {
stop('wrong input parameters')
}
}
# This is invariant to sample size
# This goes from a beta parametrisation to the effective sample size
Sample_Size_of_Beta = function(alpha, beta=1,N=1000){
if(alpha >= 1){
weights = Beta_weights(alpha1 = alpha, beta1 = beta, N=N)
return(Effective_Sample_Size(ws = weights))
} else {
stop('Alpha needs to be greater or equal to 1')
}
}
# Size of whole dataset - results are invariant to N though
N = 1000
# Just vary the first parameter in the beta distribution
alphas = seq(1,10, by=.01)
SampleSizeRed = SDs = array(dim = length(alphas))
for(i in 1:length(alphas)){
SampleSizeRed[i] = 100*Sample_Size_of_Beta(alpha = alphas[i], N = N)/N
SDs[i] = SD_Inflation(ws = Beta_weights(alpha1 = alphas[i], beta1 = 1, N=N))
}
# Plot the results
par(las = 1, mfrow=c(2,2), bty='n')
plot(alphas, SampleSizeRed, type='l', lwd=3, xlab='',xaxt='n',
ylab = 'Effective sample size (%)', yaxt='n', main='A', ylim=c(0,100))
axis(2, at = c(0,25,50,75,100))
axis(side = 1, at = c(1,3,6,9))
mtext(text =expression(alpha),side = 1,line = 2)
a_50 = alphas[which.min(abs(SampleSizeRed-50))]
lines(x=c(a_50,a_50),y = c(0,50), lty=2, lwd=2)
lines(x=c(1,a_50), y = c(50,50), lty=2, lwd=2)
a_25 = alphas[which.min(abs(SampleSizeRed-25))]
lines(x=c(a_25,a_25),y = c(0,25), lty=2, lwd=2)
lines(x=c(1,a_25), y = c(25,25), lty=2, lwd=2)
inflation50 = SDs[which.min(abs(SampleSizeRed-50))]
inflation25 = SDs[which.min(abs(SampleSizeRed-25))]
plot(alphas, SDs, type='l', lwd=3, main='B',xaxt='n',
xlab='',ylab='Standard error inflation', yaxt='n')
axis(side = 1, at = c(1,3,6,9))
axis(side = 2, at = c(1,1.5,2))
mtext(text = expression(alpha),side = 1,line = 2)
lines(x=c(a_50,a_50),y = c(0,inflation50), lty=2, lwd=2)
lines(x=c(1,a_50), y = c(inflation50,inflation50), lty=2, lwd=2)
lines(x=c(a_25,a_25),y = c(0,inflation25), lty=2, lwd=2)
lines(x=c(1,a_25), y = c(inflation25,inflation25), lty=2, lwd=2)
plot(seq(0,1,by=.01), dbeta(x = seq(0,1,by=.01), shape2 = a_50, shape1 = 1),
type='l', ylab='weight density', xlab = '',
main='C', lwd=3, yaxt='n')
axis(2, at = 0:3)
mtext(text = 'Normalized ranks',side = 1,line = 2)
plot(seq(0,1,by=.01), pbeta(q = seq(0,1,by=.01), shape2 = a_50, shape1 = 1),
type='l', ylab='Cumulative weight', xlab = '',
main='D', lwd=3,yaxt='n')
axis(2, at = c(0,0.5,1))
mtext(text = 'Normalized ranks',side = 1,line = 2)
load('../../../Datasets/Malaria Core/ImputedCore.RData')
# We want to use base deficit and parasitaemia
Leg_data = filter(Leg_data, !is.na(BD),!is.na(paraul))
# we fit our composite score on a different data
Score_Fitting_dat = filter(Leg_data, studyID != 'AQ')
# Fit the score function, adjusting for country and study site as independent random effects
score_model = glmer(outcome ~ BD + log(paraul) + (1 | studyID) + (1 | country),
data = Score_Fitting_dat, family=binomial)
score_params = c(fixef(score_model), ranef(score_model))
Leg_data$score = NA
Leg_data$score[Leg_data$studyID != 'AQ'] = predict(score_model,
Score_Fitting_dat,
type='response')
Leg_data$score[Leg_data$studyID == 'AQ'] = predict(object = score_model,
newdata =Leg_data[Leg_data$studyID=='AQ',],
type='response', allow.new.levels=T)
studies = unique(Leg_data$studyID)
Mean_Study_Scores = array(dim = length(studies))
names(Mean_Study_Scores) = studies
for(stdy in studies){
Mean_Study_Scores[stdy] = mean(Leg_data$score[Leg_data$studyID==stdy])
}
# the score is `out-of-sample' for AQ study, but in-sample for the others
AQ_dat = filter(Leg_data, studyID == 'AQ')
AQ_dat$rank = rank(AQ_dat$score)
AQ_dat = arrange(AQ_dat, rank)
par(las=1, bty='n', mfrow=c(1,2))
hist(AQ_dat$score, breaks = seq(0,1,by=.05), ylab='Number of patients',
main = 'A', xlab = 'Predicted probability of death')
boxplot(rank ~ outcome, data = AQ_dat, xaxt='n',
ylab='Patient severity rank', main = 'B', xlab='Outcome')
axis(1, at=1:2, labels = c('Survived','Died'))
Trt_Effect = function(SampleData, ws){
group1 = SampleData$drug_class == 'artemisinin'
group2 = !group1
group1 = which(group1)
group2 = which(group2)
# mean outcome in group 1
MG1 = weighted.mean(x = SampleData$outcome[group1], w = ws[group1])
MG2 = weighted.mean(x = SampleData$outcome[group2], w = ws[group2])
return(MG2 - MG1)
}
Means_test = t.test(x = AQ_dat$outcome[AQ_dat$drug_class=='artemisinin'],
y = AQ_dat$outcome[AQ_dat$drug_class!='artemisinin'])
sigma = diff(Means_test$conf.int)/4
# Iterate through all the beta distributions and compute treatment effect
N = nrow(AQ_dat); K=1000
a_50 = 10
alphas= c(seq(a_50, 1, length.out = K), rep(1,K))
betas= c(rep(1,K), rev(seq(a_50, 1, length.out = K)))
Eff_TrialSize = SDs = array(dim=length(alphas))
Covariate_Avg = array(dim = length(alphas))
YS =  array(dim=c(3,length(alphas)))
for(i in 1:length(alphas)){
ws = Beta_weights(alpha1 = alphas[i], beta1 = betas[i], N = N)
YS[2,i] = Trt_Effect(AQ_dat, ws)
Eff_TrialSize[i] = Effective_Sample_Size(ws = ws)
Covariate_Avg[i] = 100*weighted.mean(AQ_dat$score, ws)
YS[1,i] = YS[2,i] - 1.96*SD_Inflation(ws = ws)*sigma
YS[3,i] = YS[2,i] + 1.96*SD_Inflation(ws = ws)*sigma
}
YS = 100*YS
par(las=1)
layout(matrix(c(1,2,3,4), byrow = T, nrow = 2, ncol = 2))
plot(c(Eff_TrialSize[1:K],2*N - Eff_TrialSize[(K+1):(2*K)]),
YS[2,], type='l', xaxt='n', ylim = range(YS),
xlab='Effective Sample Size', ylab = 'Treatment effect', lwd=3)
lines(c(Eff_TrialSize[1:K],2*N - Eff_TrialSize[(K+1):(2*K)]),
YS[1,], lty=2, lwd=2)
lines(c(Eff_TrialSize[1:K],2*N - Eff_TrialSize[(K+1):(2*K)]),
YS[3,], lty=2, lwd=2)
axis(side = 1, at = c(N/2,N,3*N/2), labels = c(N/2,N,N/2))
abline(v=N, lty='dashed')
abline(h=0, lty='dashed',lwd=2, col='red')
plot(-(Covariate_Avg), (YS[2,]), type='l', ylim = range(YS),
xlab='Mean Linear Predictor (most to least ill)', ylab = 'Treatment effect', lwd=3)
lines(-(Covariate_Avg), (YS[1,]), lty=2, lwd=2)
lines(-(Covariate_Avg), (YS[3,]), lty=2, lwd=2)
abline(h=0, lty='dashed',lwd=2, col='red')
abline(v= -mean(AQ_dat$score), lty='dashed')
plot(AQ_dat$rank, 1000*Beta_weights(alphas[1], betas[1], N=N), type='l',
xlab = 'ranks from least to most ill', ylab = 'relative weight',lwd=3,
main='Extreme Left')
plot(AQ_dat$rank, 1000*Beta_weights(alphas[2*K], betas[2*K], N=N), type='l',
xlab = 'ranks from least to most ill', ylab = 'relative weight',lwd=3,
main='Extreme Right')
mycols = brewer.pal(length(studies), name = 'Dark2')
main_col = mycols[which(studies=='AQ')]
par(las = 1, bty='n', mar=c(4,4,4,2))
plot((Covariate_Avg), (YS[2,]), type='l', ylim = range(YS),
xlab='Mean baseline predicted mortality (%)',
ylab = 'Treatment effect', lwd=3, col=main_col,
xlim = range(c(100*Mean_Study_Scores, Covariate_Avg)))
lines((Covariate_Avg), (YS[1,]), lty=2, lwd=2, col=main_col)
lines((Covariate_Avg), (YS[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS[c(1,3),K], lwd=2, lty='dotted')
abline(v= 100*Mean_Study_Scores, col = mycols,
lty = 1, lwd=3)
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Covariate_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
legend('topleft', col = mycols, legend = studies,
lty = 1, lwd=3)
mycols = brewer.pal(length(studies), name = 'Dark2')
main_col = mycols[which(studies=='AQ')]
par(las = 1, bty='n', mar=c(4,4,4,2))
plot(Covariate_Avg, (YS[2,]), type='l', ylim = range(YS),
xlab='Mean baseline predicted mortality (%)',
ylab = 'Mean mortality difference (%) and 95% CI', lwd=3, col=main_col,
xlim = range(c(100*Mean_Study_Scores, Covariate_Avg)))
lines((Covariate_Avg), (YS[1,]), lty=2, lwd=2, col=main_col)
lines((Covariate_Avg), (YS[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS[c(1,3),K], lwd=2, lty='dotted')
abline(v= 100*Mean_Study_Scores[studies=='AQ'], col = mycols[which(studies=='AQ')],
lty = 1, lwd=3)
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Covariate_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
AQ_dat$AgeInYear = jitter(AQ_dat$AgeInYear, amount = .1)
AQ_dat$HCT = jitter(AQ_dat$HCT, amount = .1)
Eff_TrialSize = SDs = array(dim=length(alphas))
Age_Avg = Hct_Avg = array(dim = length(alphas))
AQ_dat$score = AQ_dat$AgeInYear
AQ_dat = arrange(AQ_dat, score)
YS_age = YS_hct = array(dim=c(3,length(alphas)))
# Do for age first
for(i in 1:length(alphas)){
ws = Beta_weights(alpha1 = alphas[i], beta1 = betas[i], N = N)
YS_age[2,i] = Trt_Effect(AQ_dat, ws)
Eff_TrialSize[i] = Effective_Sample_Size(ws = ws)
Age_Avg[i] = weighted.mean(AQ_dat$score, ws)
YS_age[1,i] = YS_age[2,i] - 1.96*SD_Inflation(ws = ws)*sigma
YS_age[3,i] = YS_age[2,i] + 1.96*SD_Inflation(ws = ws)*sigma
}
YS_age = 100*YS_age
# Do for haematocrit second
AQ_dat$score = AQ_dat$HCT
AQ_dat = arrange(AQ_dat, score)
for(i in 1:length(alphas)){
ws = Beta_weights(alpha1 = alphas[i], beta1 = betas[i], N = N)
YS_hct[2,i] = Trt_Effect(AQ_dat, ws)
Eff_TrialSize[i] = Effective_Sample_Size(ws = ws)
Hct_Avg[i] = weighted.mean(AQ_dat$score, ws)
YS_hct[1,i] = YS_hct[2,i] - 1.96*SD_Inflation(ws = ws)*sigma
YS_hct[3,i] = YS_hct[2,i] + 1.96*SD_Inflation(ws = ws)*sigma
}
YS_hct = 100*YS_hct
mycols = brewer.pal(length(studies), name = 'Dark2')
main_col = mycols[which(studies=='AQ')]
par(las = 1, bty='n', mar=c(4,4,4,2), mfrow=c(1,2))
plot(Age_Avg, (YS_age[2,]), type='l', ylim = range(YS_age),
xlab='Mean baseline age (years)',
ylab = 'Mean mortality difference (%) and 95% CI', lwd=3, col=main_col,
xlim = range(Age_Avg))
lines((Age_Avg), (YS_age[1,]), lty=2, lwd=2, col=main_col)
lines((Age_Avg), (YS_age[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS_age[c(1,3),K], lwd=2, lty='dotted')
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Age_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
#******* HCT ***************#
plot(Hct_Avg, (YS_hct[2,]), type='l', ylim = range(YS_hct),
xlab='Mean baseline age (years)',
ylab = 'Mean mortality difference (%) and 95% CI', lwd=3, col=main_col,
xlim = range(Hct_Avg))
lines((Hct_Avg), (YS_hct[1,]), lty=2, lwd=2, col=main_col)
lines((Hct_Avg), (YS_hct[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS_hct[c(1,3),K], lwd=2, lty='dotted')
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Age_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
mycols = brewer.pal(length(studies), name = 'Dark2')
main_col = mycols[which(studies=='AQ')]
par(las = 1, bty='n', mar=c(4,4,4,2), mfrow=c(1,2))
plot(Age_Avg, (YS_age[2,]), type='l', ylim = range(YS_age),
xlab='Mean baseline age (years)',
ylab = 'Mean mortality difference (%) and 95% CI', lwd=3, col=main_col,
xlim = range(Age_Avg))
lines((Age_Avg), (YS_age[1,]), lty=2, lwd=2, col=main_col)
lines((Age_Avg), (YS_age[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS_age[c(1,3),K], lwd=2, lty='dotted')
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Age_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
#******* HCT ***************#
plot(Hct_Avg, (YS_hct[2,]), type='l', ylim = range(YS_hct),
xlab='Mean baseline haematocrit (%)',
ylab = 'Mean mortality difference (%) and 95% CI', lwd=3, col=main_col,
xlim = range(Hct_Avg))
lines((Hct_Avg), (YS_hct[1,]), lty=2, lwd=2, col=main_col)
lines((Hct_Avg), (YS_hct[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS_hct[c(1,3),K], lwd=2, lty='dotted')
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Age_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
mycols = brewer.pal(length(studies), name = 'Dark2')
main_col = mycols[which(studies=='AQ')]
par(las = 1, bty='n', mar=c(4,4,4,2), mfrow=c(1,2))
plot(Age_Avg, (YS_age[2,]), type='l', ylim = range(YS_age),
xlab='Mean age (years)',
ylab = 'Mean mortality difference (%) and 95% CI', lwd=3, col=main_col,
xlim = range(Age_Avg))
lines((Age_Avg), (YS_age[1,]), lty=2, lwd=2, col=main_col)
lines((Age_Avg), (YS_age[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS_age[c(1,3),K], lwd=2, lty='dotted')
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Age_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
#******* HCT ***************#
plot(Hct_Avg, (YS_hct[2,]), type='l', ylim = range(YS_hct),
xlab='Mean haematocrit (%)',
ylab = 'Mean mortality difference (%) and 95% CI', lwd=3, col=main_col,
xlim = range(Hct_Avg))
lines((Hct_Avg), (YS_hct[1,]), lty=2, lwd=2, col=main_col)
lines((Hct_Avg), (YS_hct[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS_hct[c(1,3),K], lwd=2, lty='dotted')
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Age_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
mycols = brewer.pal(length(studies), name = 'Dark2')
main_col = mycols[which(studies=='AQ')]
par(las = 1, bty='n', mar=c(4,4,4,2), mfrow=c(1,2))
plot(Age_Avg, (YS_age[2,]), type='l', ylim = range(YS_age),
xlab='Mean age (years)',
ylab = 'Mean mortality difference (%) and 95% CI', lwd=3, col=main_col,
xlim = range(Age_Avg))
lines((Age_Avg), (YS_age[1,]), lty=2, lwd=2, col=main_col)
lines((Age_Avg), (YS_age[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS_age[c(1,3),K], lwd=2, lty='dotted')
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Age_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
#******* HCT ***************#
plot(Hct_Avg, (YS_hct[2,]), type='l', ylim = range(YS_hct),
xlab='Mean haematocrit (%)',
ylab = 'Mean mortality difference (%) and 95% CI', lwd=3, col=main_col,
xlim = range(Hct_Avg))
lines((Hct_Avg), (YS_hct[1,]), lty=2, lwd=2, col=main_col)
lines((Hct_Avg), (YS_hct[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS_hct[c(1,3),K], lwd=2, lty='dotted')
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Age_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
AQ_dat$AgeInYear = jitter(AQ_dat$AgeInYear, amount = .1)
AQ_dat$HCT = jitter(AQ_dat$HCT, amount = .1)
Eff_TrialSize = SDs = array(dim=length(alphas))
Age_Avg = Hct_Avg = array(dim = length(alphas))
AQ_dat$score = AQ_dat$AgeInYear
AQ_dat = arrange(AQ_dat, score)
YS_age = YS_hct = array(dim=c(3,length(alphas)))
# Do for age first
for(i in 1:length(alphas)){
ws = Beta_weights(alpha1 = alphas[i], beta1 = betas[i], N = N)
YS_age[2,i] = Trt_Effect(AQ_dat, ws)
Eff_TrialSize[i] = Effective_Sample_Size(ws = ws)
Age_Avg[i] = weighted.mean(AQ_dat$score, ws)
YS_age[1,i] = YS_age[2,i] - 1.96*SD_Inflation(ws = ws)*sigma
YS_age[3,i] = YS_age[2,i] + 1.96*SD_Inflation(ws = ws)*sigma
}
YS_age = 100*YS_age
# Do for haematocrit second
AQ_dat$score = AQ_dat$HCT
AQ_dat = arrange(AQ_dat, score)
for(i in 1:length(alphas)){
ws = Beta_weights(alpha1 = alphas[i], beta1 = betas[i], N = N)
YS_hct[2,i] = Trt_Effect(AQ_dat, ws)
Eff_TrialSize[i] = Effective_Sample_Size(ws = ws)
Hct_Avg[i] = weighted.mean(AQ_dat$score, ws)
YS_hct[1,i] = YS_hct[2,i] - 1.96*SD_Inflation(ws = ws)*sigma
YS_hct[3,i] = YS_hct[2,i] + 1.96*SD_Inflation(ws = ws)*sigma
}
YS_hct = 100*YS_hct
mycols = brewer.pal(length(studies), name = 'Dark2')
main_col = mycols[which(studies=='AQ')]
par(las = 1, bty='n', mar=c(4,4,4,2), mfrow=c(1,2))
plot(Age_Avg, (YS_age[2,]), type='l', ylim = range(YS_age),
xlab='Mean age (years)',
ylab = 'Mean mortality difference (%) and 95% CI', lwd=3, col=main_col,
xlim = range(Age_Avg))
lines((Age_Avg), (YS_age[1,]), lty=2, lwd=2, col=main_col)
lines((Age_Avg), (YS_age[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS_age[c(1,3),K], lwd=2, lty='dotted')
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Age_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
#******* HCT ***************#
plot(Hct_Avg, (YS_hct[2,]), type='l', ylim = range(YS_hct),
xlab='Mean haematocrit (%)',
ylab = 'Mean mortality difference (%) and 95% CI', lwd=3, col=main_col,
xlim = range(Hct_Avg))
lines((Hct_Avg), (YS_hct[1,]), lty=2, lwd=2, col=main_col)
lines((Hct_Avg), (YS_hct[3,]), lty=2, lwd=2, col= main_col)
abline(h=0, lty='dashed',lwd=3)
abline(h=YS_hct[c(1,3),K], lwd=2, lty='dotted')
ind0 = which.min(abs(Eff_TrialSize[1:K] - N/4))
ind1 = which.min(abs(Eff_TrialSize[1:K] - N/2))
ind2 = K + which.min(abs(Eff_TrialSize[(K+1):(2*K)] - N/2))
axis(3, at = Age_Avg[c(ind0, ind1, K, ind2)], labels = round(c(N/4,N/2,N,N/2)))
mtext(side = 3, line = 2, text = 'Effective Sample Size')
plot(AQ_dat$AgeInYear, AQ_dat$rank)
AQ_dat$rank
cor.test(AQ_dat$rank, AQ_dat$AgeInYear)
cor.test(AQ_dat$outcome, AQ_dat$AgeInYear)
cor.test(AQ_dat$outcome, AQ_dat$HCT)
